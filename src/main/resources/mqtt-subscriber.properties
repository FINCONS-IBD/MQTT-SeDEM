MQTT_PASSWORD=<<password>>
MQTT_USERNAME=<<username>>
#N.B: the publisher and subscriber client ids must be unique!
MQTT_CLIENT_ID=<<client_id>>
MQTT_QOS=1
MQTT_BROKER=<<broker.url.com>>
MQTT_PORT=<<broker-port>>
MQTT_PROTOCOL=ssl
MQTT_CLEARSESSION=true
MQTT_RETAINED=true
#in millisecond
MQTT_TIME_TO_WAIT=100000
#in seconds
MQTT_TIMEOUT=30
#in second (the ping interval to keep the connection opened)
#it is important know the max keep alive of the server (mosquitto/evrythng=120s)
MQTT_KEEP_ALIVE=125

#CPABE_AES PARAMS
CPABE_AES_ENCRYPTION=true
CPABE_POLICY=c:IT
#if this parameter is true, the new key is calculated before the current key expires
CPABE_ANTICIPATED_KEY=true
#number of seconds to calculate the next symmetric key
CPABE_ANTICIPATED_KEY_IN_SECONDS=20

#key type
KEY_TYPE=EC
CRYPTOGRAPHIC_CURVE=P-256
ALG=ECDH-ES
ENC=A128GCM

PROXY_PROTOCOL=http
PROXY_IP=<<abe-proxy-ip>>
PROXY_PORT=<<abe-proxy-port>>
PROXY_ID=ABE-Proxy

#key storage parameter. The ip of the KSS respect to the subscriber client.
#The subscriber contacts directly the KSS to retrieve the key!
#if the subscriber is on the same machine of the KSS, please insert localhost
STORAGE_TYPE=database
DB_IP=<<key-storage-ip>>
DB_PORT=<<key-storage-port>>
DB_AUTH_USER=<<key-storage-username>>
DB_AUTH_PWD=<<key-storage-password>>
DB_DATABASE=<<key-storage-database>>
DB_TABLE=<<key-storage-table>>

PAYLOAD_PATTERN=[{"value": "{"headers":{},"payload":""}"}]
PLACEHOLDER_PATTERN="{"headers":{},"payload":""}"

##### DATA CONSUMER (decrypt data) #####
CONSUMER.PUBLIC_PARAM=<<public_key_full_path>>
CONSUMER.CPABE_PRIV_KEY=<<private_key_full_path>>